# -*- coding: utf-8 -*-
"""1907099_Pneumonia_or_normal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJWk--6dfen7CmVCcRGsaydc0FOfb89i
"""

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

!unzip chest-xray-pneumonia.zip

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout
from keras.preprocessing.image import ImageDataGenerator

# Load and preprocess datasets
def load_and_preprocess_data(train_dir, validation_dir, img_size=(256, 256), batch_size=32):
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest'
    )

    validation_datagen = ImageDataGenerator(rescale=1./255)

    train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=img_size,
        batch_size=batch_size,
        class_mode='binary'
    )

    validation_generator = validation_datagen.flow_from_directory(
        validation_dir,
        target_size=img_size,
        batch_size=batch_size,
        class_mode='binary'
    )

    return train_generator, validation_generator

train_dir = '/content/chest_xray/train'
validation_dir = '/content/chest_xray/test'
img_size = (256, 256)
batch_size = 32

train_data, validation_data = load_and_preprocess_data(train_dir, validation_dir, img_size, batch_size)

# Define the model
def create_cnn_model(input_shape):
    model = Sequential()

    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2, padding='valid'))

    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

    model.add(Conv2D(256, (3, 3), activation='relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

    model.add(Flatten())

    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    return model

input_shape = (img_size[0], img_size[1], 3)
model = create_cnn_model(input_shape)
model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(
    train_data,
    epochs=12,
    validation_data=validation_data
)

import matplotlib.pyplot as plt

# Plot training history
plt.plot(history.history['accuracy'], color='red', label='train')
plt.plot(history.history['val_accuracy'], color='blue', label='validation')
plt.legend()
plt.show()

# Load and display a test image
import cv2

test_img_path = '/content/Pneumonia_Chest_xray.jpeg'
test_img = cv2.imread(test_img_path)
plt.imshow(test_img)
plt.show()

# Resize the test image and prepare it for model prediction
test_img_resized = cv2.resize(test_img, (256, 256))
test_input = test_img_resized.reshape((1, 256, 256, 3))

# Make predictions on the test image using the trained model
prediction = model.predict(test_input)
print("Prediction:", prediction)
if prediction[0][0] > 0.5:
    print("Prediction: Pneumonia detected!")
else:
    print("Prediction: No pneumonia detected!")

# Load and display a test image
import cv2

test_img_path = '/content/normal_Chest_Xray.jpeg'
test_img = cv2.imread(test_img_path)
plt.imshow(test_img)
plt.show()

# Resize the test image and prepare it for model prediction
test_img_resized = cv2.resize(test_img, (256, 256))
test_input = test_img_resized.reshape((1, 256, 256, 3))

# Make predictions on the test image using the trained model
prediction = model.predict(test_input)
print("Prediction:", prediction)
if prediction[0][0] > 0.5:
    print("Prediction: Pneumonia detected!")
else:
    print("Prediction: No pneumonia detected!")